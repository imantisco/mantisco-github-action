name: Composition / Test Helm Template

runs:
  using: composite
  steps:
    - name: "[1/5] checkout"
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: "[2/5] Cache Helm CLI"
      uses: actions/cache@v3
      with:
        path: |
          ~/.helm
          /usr/local/bin/helm
        key: ${{ runner.os }}-helm-${{ hashFiles('get_helm.sh') }}
        restore-keys: |
          ${{ runner.os }}-helm-

    - name: "[3/5] Install Helm CLI"
      shell: bash
      run: |
        if ! command -v helm &> /dev/null; then
          echo "Helm not found, installing..."
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
        else
          echo "Helm is cached, skipping installation."
        fi

    - name: "[4/5] Helm Template"
      shell: bash
      run: |
        set -x
        chmod +x ${{ github.action_path }}/action.sh

    - name: "[5/5] Helm Template"
      shell: bash
      run: |
        export KUBECONFIG=/dev/null

        DEFAULT_LOG_MODE=INFO
        logMode="${1:-$DEFAULT_LOG_MODE}"

        logger() {
            local LEVEL=$1
            local LEVEL_COLOR='\033[0;37m'
            local message=$2

            GREEN='\033[0;32m'
            GRAY='\033[0;90m'
            BLUE='\033[0;34m'
            RED='\033[0;31m'
            WHITE='\033[0;37m'

            case $LEVEL in
                INFO) LEVEL_COLOR="$BLUE" ;;
                DEBUG) LEVEL_COLOR="$GREEN" ;;
                WARNING) LEVEL_COLOR="$GRAY" ;;
                ERROR) LEVEL_COLOR="$RED" ;;
            esac

            if [ "$logMode" = "DEBUG" ]; then
                echo -e "${LEVEL_COLOR}$LEVEL${RESET} ${WHITE}$message${RESET}"
            elif [ "$LEVEL" != "DEBUG" ]; then
                echo -e "${LEVEL_COLOR}$LEVEL${RESET} ${WHITE}$message${RESET}"
            fi

        }
        listHelmChart() {
            # find . -maxdepth 2 -type f -name "Chart.yaml"                                               # ./har-w3c-event-watcher-svc/Chart.yaml
            # find . -maxdepth 2 -type f -name "Chart.yaml" -exec dirname {} \;                           # ./har-w3c-event-watcher-svc
            # find . -maxdepth 2 -type f -name "Chart.yaml" -exec dirname {} \; | xargs -I {} basename {} # har-w3c-event-watcher-svc
            local helmChartList=$(find . -maxdepth 2 -type f -name "Chart.yaml" -exec dirname {} \; | xargs -I {} basename {})
            echo $helmChartList
        }
        validateHelmChart() {
            local helmChart=$1
            logger INFO "$helmChart 검증 시작"
            __validate__() {
                local helmChart=$1
                logger DEBUG "$helmChart 기본 검증 시작"
                local manifestLines=$(helm template "$helmChart" --values "$helmChart/values.yaml" | wc -l)
                if [ $manifestLines -eq 0 ]; then
                    logger ERROR "$helmChart 기본 검증 실패"
                    exit 127
                else
                    logger INFO "$helmChart 기본 검증 성공"
                fi
            }
            __validateParams__() {
                local helmChart=$1
                local helmChartValuesFile=$2
                logger DEBUG "$helmChart/$helmChartValuesFile 검증 시작"

                local FILE_COUNT=$(find . -maxdepth 2 -name $helmChartValuesFile | grep -x "./$helmChart/$helmChartValuesFile" | wc -l)
                if [ $FILE_COUNT -eq 0 ]; then
                    logger WARNING "$helmChart/$helmChartValuesFile 존재하지 않음"
                else
                    local manifestLines=$(helm template "$helmChart" --values "$helmChart/$helmChartValuesFile" | wc -l)
                    if [ $manifestLines -eq 0 ]; then
                        logger ERROR "$helmChart 기본 검증 실패"
                        exit 127
                    else
                        logger INFO "$helmChart 기본 검증 성공"
                    fi
                fi
            }

            __validate__ "$helmChart"
            __validateParams__ "$helmChart" "values-dev.yaml"
            __validateParams__ "$helmChart" "values-stg.yaml"
            __validateParams__ "$helmChart" "values-prod.yaml"

            logger INFO "$helmChart 검증 종료"
        }


        helmChartList=$(listHelmChart)
        for helmChart in $helmChartList
        do
            validateHelmChart "$helmChart"
        done

        